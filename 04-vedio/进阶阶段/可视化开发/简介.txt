python编程+Django框架 web网站开发

1、了解Django框架
    作用：
        开发网站、做一些云接口（云服务）
    为什么选择Django框架
        开发的资源比较多；性能比较高，，能够承受高流量

2、了解Python和Django框架的关系
    python编程：直接用来编程逻辑的
    Django框架：python编写的，和python编程的兼容性好，使用简单，第三方库，敏捷开发
    pip list：查看第三方库

2、创建后台数据库账户并登录默认的框架后台
 1）建表（django框架自带的后台数据表）
 通过指令建表python manage.py migrate
 注意：利用的是框架默认的模型文件（python类文件）
 3）创建登录账号
 通过指令python manage.py createsuperuser
 创建管理员用户账号
 4）查看数据库
 创建管理员等用户的表是Auth_user表
 用户登录后会有一个会话数据
 Django_session表

掌握settings.py配置文件配置网站显示的语言
    Language_code这个变量的值从en-us 改为 zh-hans 不区分大小写
    zh-hans 简体中文
    zh-hant 繁体中文
    Lib\site-packages\django\conf   查看语言

二、掌握路由的修改
1、掌握简单网页路由
    Django框架的路由：是用户访问网页的url网址有关的路径会跳转到不同的网页
    是由框架文件中的url.py文件决定的。
    path('admin/', admin.site.urls)
        path(网页路径的字符串，这个路径对应的网页)
2、掌握自定义网页访问函数
    网页上面用户可以访问的网页呈现什么功能，都是view.py这个文件
    理解views就是Django框架中的视图
    def index(request):
        return HttpResponse('hello wold')
    注：先导入一个from django.http import HttpResponse类，作用就是可以将后台的内容输出到浏览器上
    以后在自定义的函数的时候，加上request这个参数，以后去获取网页上面传给后台的内容数据

三、框架
_init_.py的作用：在文件夹内默认存在的一个文件，创建项目和应用的时候默认给的
    主要作用：是为了给其他文件使用之前预载一些值或文件。（预处理）
migrations文件夹：是models.py文件定义类之后，会生成一些数据库数据表操作的代码。
    这个文件夹是一个临时文件夹，只有在迁移命令migrate执行后才会真正被执行
settings.py文件：是针对整个项目应用的配置，影响网址的整体（数据库链接、资源文件、中间间）

1、理解HTTP接口
api接口：应用程序接口（软件动态链接库接口、http接口、socket接口等）
http主要用于网页上面的传输协议
使用http接口，就相当于调用网址这种形式
前端开发者：调用http网址，获取数据；利用http网站向服务器接口传递数据，以获得指定的数据或者改变服务器上的一些数据
http://网址?参数1=值1&参数2=值2...
通过url网址的形式可以传递多个参数，每个参数之间使用&符合隔开
2、python编程json格式化
方法一：
    使用python的json库，用httpResponse输出json字符串
方法二：
    使用django框架中的jsonresponse直接可以返回json数据
json数据：简单去理解为如下，类似python
json对象：类似python中的字典{键1：值1，键2：值2...}
json数组：类似python中的列表[值1,值2，值3]，这个值可以是某个对象，也可以是列表

3、利用html网页模版来开发网站，通过template功能。MTV
3.1配置模版页的路径
    1）创建模版文件夹，里面有很多的html模版
        创建首页文件index.html文件
    2）配置模版页文件夹
            打开settings.py文件，找到templates变量，找到DIRS，设置如下值
            'DIRS': [str(BASE_DIR)+"/polls/template"],
            str(BASE_DIR：项目根目录
    3）编写网页的功能函数
       利用render方法来渲染html网页
       render(request,要渲染的网页)

3.2配置路由，渲染html页

四、Template模版页
1、render函数的数据传递的用法
    render函数第三个参数的用法，用来向模版页传递变量
    参数：可以写成键值对的形式进行传递
    注：数据传递给的是模版页，字典的形式传递的，字典的键作为模版页中的变量
    接收：在模版页里面接收
    格式：使用{{变量的值}}
    符合{{}}用来框架渲染html之前，字符串替换的标志
2、处理没有数据的情况，模版页的default用法
    default在模版页中的变量输出用法属于模版页中过滤器的用法
    使用格式：
        在template模版页中需要输出变量的地方，将变量的格式输出如下：
        {{变量(后台传过来的键)|default:"默认值"}}
3、模版网页批量输出python后台数据
1）模版页中for语句的使用
    {%for 变量列表%}
        循环输出的内容
    {%endfor%}
2）针对空数据时显示方式
    使用empty的方式，这个方式在for语句内部
    使用格式：
    {%for 变量列表%}
        循环输出的内容
    {%empty%}
        当数据为空的时候输出
    {%endfor%}
3）if语句判断
    a.if语句语法
        {%if 条件表达式类似python的语法 %}
            符合条件的时候会执行的部分
        {%endif%}
    b.if+else
        {%if 条件表达式类似python的语法 %}
            符合条件的时候会执行的部分
        {%else%}
            当不符合条件时，执行的部分
        {%endif%}
    c.if+elif+..+else
        {%if 条件表达式类似python的语法 %}
            符合条件的时候会执行的部分
        {%elseif 当上面的条件不满足时会执行这个条件表达式判断%}
            符合elif条件的情况，执行的部分
        {%elseif 当上面的条件不满足时会执行这个条件表达式判断%}
            符合elif条件的情况，执行的部分
        {%elseif 当上面的条件不满足时会执行这个条件表达式判断%}
            符合elif条件的情况，执行的部分
        {%else%}
            当不符合条件时，执行的部分
        {%endif%}
4）日期格式化输出
    a.date格式化方式
        日期时间型变量输出格式自定义方式
            {{变量|date:'Y年m月d日h时i分s秒'}}
        此时变量类型必须是python中的日期时间类型
            日期：{{article.date|date:'Y年m月d日'}}
    b.解决后台字符串日期格式化输出问题
        python后台将字符串型的数据转为日期时间型
        需要datetime库中的strptime函数
        格式：
            strptime(需要格式化的日期时间的字符串，字符串的格式描述)
            datetime.strptime('2024-06-26 10:23:22', '%Y-%m-%d %H:%M:%S')
4）常用大小写转换
    a.字母大小写转换
    b.upper、lower、title函数的用法（变量过滤器的使用）
        upper：全部转为大写
        lower:全部转为小写
        title：首字符转为大写










